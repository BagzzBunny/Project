#include <iostream>
#include <string>
#include <fstream>
#include <Windows.h>
#include <vector>

using namespace std;

int hkey(string key, int k) 
{
	int s = 0;
	for (int i = 0; i < k; i++)
	{
		s +=(0 + key[i]);
	}
	return s;
}

int contains_RP(string haystack, string needle) // Рабин Карп первое вхождение
{	
	int hash = hkey(haystack, needle.size());
	int key = hkey(needle, needle.size()) % 62;
	for (int i = 0; i < haystack.size() - needle.size() - 1; i++)
	{
		int s = 0;
		int hint = hash % 62;
		if (hint == key)
		{		
			for (int j = 0; j < needle.size(); j++)
			{
				if (haystack[i + j] != needle[j])
					break;
				s++;
			}
			if (s == needle.size())
			{
				return i + 1;
			}
		}
		hash = hash - (0 + haystack[i]) + (0 + haystack[i + needle.size()]);
	}
	return -1;
}

void containsAll_RP(string haystack, string needle, vector<int> &vec)// Рабин Карп все вхождения
{
	int hash = hkey(haystack, needle.size());
	int key = hkey(needle, needle.size()) % 62;
	int k = 0;
	for (int i = 0; i < haystack.size() - needle.size() - 1; i++)
	{
		int s = 0;
		int hint = hash % 62;
		if (hint == key)
		{
			for (int j = 0; j < needle.size(); j++)
			{
				if (haystack[i + j] != needle[j])
					break;
				s++;
			}
			if (s == needle.size())
			{
				vec.push_back(i + 1);
				k++;
			}
		}
		hash = hash - (0 + haystack[i]) + (0 + haystack[i + needle.size()]);
	}
	return;
}

int contains_KMP (string haystack, string needle)
{
	int s;
	for (int i = 0; i < haystack.size() - needle.size(); i++)
	{
		int k = 0;
		s = 0;
		for (int j = 0; j < needle.size(); j++)
		{
			k++;
			if (haystack[i + j] != needle[j])
			{
				i = i + k;
				break;
			}
			s++;
		}
		if (s == needle.size())
		{
			return i + 1;
		}
	}
	return -1;
}

void containsALL_KMP(string haystack, string needle, vector<int> &vec)
{
	int g = 0;
	int s;
	for (int i = 0; i < haystack.size() - needle.size(); i++)
	{
		s = 0;
		int k = 0;
		for (int j = 0; j < needle.size(); j++)
		{
			k++;
			if (haystack[i + j] != needle[j])
			{
				i = i + k;
				break;
			}
			s++;
		}
		if (s == needle.size())
		{
			vec.push_back(i + 1);
		}
	}
	return;
}

int contains(string haystack, string needle)
{
	int s;
	for (int i = 0; i < haystack.size() - needle.size(); i++)
	{
		s = 0;
		for (int j = 0; j < needle.size(); j++)
		{
			if (haystack[i + j] == needle[j])
				s++;
		}
		if (s == needle.size())
		{
			return i + 1;
		}
	}
	return -1;
}


void containsALL(string haystack, string needle, vector<int> &vec)
{
	int k = 0;
	int s;
	for (int i = 0; i < haystack.size() - needle.size(); i++)
	{
		s = 0;
		for (int j = 0; j < needle.size(); j++)
		{
			if (haystack[i + j] == needle[j])
				s++;
		}
		if (s == needle.size())
		{
			vec.push_back(i + 1);
		}
	}
	return;
}

void printFirst(int s)
{
	if (s == -1)
		cout << "Такой строки нет" << endl;
	else
		cout << "Координаты найденной подстроки" << s << endl;
	return;
}

void printAll(vector<int> &vec)
{
	if (vec.empty())
	{
		cout << "Такой строки не обнаружилось." << endl;
	}
	else
	{
		cout << "Найденные подстроки:" << endl;
		for (int i = 0; i < vec.size(); i++)
			cout << vec[i] << endl;
	}
}

void menu_choose(string str, string need)
{
	vector<int> vec;
	char choose;
	cout << "Выберите метод поиска:" << endl << "1)Простой метод" << endl << "2)Алгоритм Кнута-Морриса-Пратта" << endl << "3)Алгоритм Рабина-Карпа" << endl << "Ваш выбор:";
	cin >> choose;
	cout << endl;
	switch (choose)
	{
	case '1':
		cout << "Выберите подтип метода поиска:" << endl << "1)Вывести первое вхождение" << endl << "2)Вывести все вхождения" << endl;
		char choose2;
		cin >> choose2;
		switch (choose2)
		{
		case '1':
			printFirst(contains(str, need));
			return;
		case '2':
			containsALL(str, need, vec);
			printAll(vec);
			break;
		default:
			cout << "У тебя была одна задача! Выбрать 1 или 2, но ты и её завалил." << endl;
			break;
		}
		break;
	case '2':
		cout << "Выберите подтип метода поиска:" << endl << "1)Вывести первое вхождение" << endl << "2)Вывести все вхождения" << endl;
		char chooseKMP;
		cin >> chooseKMP;
		switch (chooseKMP)
		{
		case '1':
			printFirst(contains_KMP(str, need));
			break;
		case '2':
			containsALL_KMP(str, need, vec);
			printAll(vec);
			break;
		default:
			cout << "У тебя была одна задача! Выбрать 1 или 2, но ты и её завалил." << endl;
			break;
		}
		break;
	case '3':
		cout << "Выберите подтип метода поиска:" << endl << "1)Вывести первое вхождение" << endl << "2)Вывести все вхождения" << endl;
		char chooseRP;
		cin >> chooseRP;
		switch (chooseRP)
		{
		case '1':
			printFirst(contains_RP(str, need));
			return;
		case '2':
			containsAll_RP(str, need, vec);
			printAll(vec);
			break;
		default:
			cout << "У тебя была одна задача! Выбрать 1 или 2, но ты и её завалил." << endl;
			break;
		}
	}
	return;
}


void main_menu()
{
	cout << "Исходный текст:" << endl;
	string str;
	ifstream in("input.txt");
	while (!in.eof()) {
		string temp;
		getline(in, temp);
		str += temp;
	}
	cout << str;
	cout << endl << "----------------------------------" << endl;
	string need;
	char choose;
	do
	{
		cout << "Выберите, что делать:" << endl << "1. Ввести строку поиска" << endl << "0. Выйти" << endl;
		cin >> choose;
		cout << endl;
		switch (choose)
		{
		case'1':
			cout << "Введите строку поиска:";
			cin >> need;
			menu_choose(str, need);
			break;
		case '0':
			return;
		default:
			cout << "У тебя была одна задача! Выбрать 1 или 2, но ты и её завалил." << endl;
			break;
		}
	} while (choose != 0);
}

int main()
{
	setlocale(LC_ALL, "Russian");
	main_menu();
	return 0;
}
